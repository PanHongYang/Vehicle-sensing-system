# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from esr_msgs/Measurement.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import esr_msgs.msg
import std_msgs.msg

class Measurement(genpy.Message):
  _md5sum = "1f00ed2bd4b53e883b8642a3983d0209"
  _type = "esr_msgs/Measurement"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
Status status
Track[] tracks

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: esr_msgs/Status
Header header
# from 4e0
uint16 scan_index
#uint8 dsp_timestamp # in ms
#float32 vehicle_speed # in m/s
#float32 vehicle_yaw_rate # in in deg/s
#float32 vehicle_turning_radius # in m
#float32 range # cropped between 0..204.7 m
bool is_comm_error
# from 4e1
#uint16 steering_angle_ack # in deg
bool is_radiating
bool is_failed
bool is_blocked
bool is_overheating
#uint8 max_tracks_ack # 1..64
bool is_raw_data_mode
int8 internal_temperature # in degC
uint16 sw_version
#float32 yaw_rate_bias # deg/s
#float32 veh_spd_comp_factor
# from 4e3
bool is_lr_enabled
bool is_mr_enabled
bool is_sidelobe_blockage
bool is_partial_blockage
#float32 auto_align_angle

================================================================================
MSG: esr_msgs/Track
Header header
uint8 status # 0: no target 1: new 2: new updated 3: updated 4: coasted 5: merged 6: invalid coasted 7: new coasted
uint8 index # 1..64
float32 range # cropped between 0..204.7 m
float32 range_rate # cropped between -81.92..81.91m/s
float32 range_accl # cropped between -25.6..25.55 m/s^2
float32 azimuth # cropped between -51.2..51.1 deg
float32 lateral_rate # cropped between -8..7.75 m/s
float32 width # cropped between 0..7.5 m
bool is_mr_update
bool is_lr_update
#bool is_oncoming
#bool is_bridge
#bool is_grouping_changed
int8 amplitude # cropped to -10..21dB
"""
  __slots__ = ['header','status','tracks']
  _slot_types = ['std_msgs/Header','esr_msgs/Status','esr_msgs/Track[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,status,tracks

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Measurement, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status is None:
        self.status = esr_msgs.msg.Status()
      if self.tracks is None:
        self.tracks = []
    else:
      self.header = std_msgs.msg.Header()
      self.status = esr_msgs.msg.Status()
      self.tracks = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.status.header.seq, _x.status.header.stamp.secs, _x.status.header.stamp.nsecs))
      _x = self.status.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_H6BbH4B().pack(_x.status.scan_index, _x.status.is_comm_error, _x.status.is_radiating, _x.status.is_failed, _x.status.is_blocked, _x.status.is_overheating, _x.status.is_raw_data_mode, _x.status.internal_temperature, _x.status.sw_version, _x.status.is_lr_enabled, _x.status.is_mr_enabled, _x.status.is_sidelobe_blockage, _x.status.is_partial_blockage))
      length = len(self.tracks)
      buff.write(_struct_I.pack(length))
      for val1 in self.tracks:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2B6f2Bb().pack(_x.status, _x.index, _x.range, _x.range_rate, _x.range_accl, _x.azimuth, _x.lateral_rate, _x.width, _x.is_mr_update, _x.is_lr_update, _x.amplitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status is None:
        self.status = esr_msgs.msg.Status()
      if self.tracks is None:
        self.tracks = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.status.header.seq, _x.status.header.stamp.secs, _x.status.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.status.scan_index, _x.status.is_comm_error, _x.status.is_radiating, _x.status.is_failed, _x.status.is_blocked, _x.status.is_overheating, _x.status.is_raw_data_mode, _x.status.internal_temperature, _x.status.sw_version, _x.status.is_lr_enabled, _x.status.is_mr_enabled, _x.status.is_sidelobe_blockage, _x.status.is_partial_blockage,) = _get_struct_H6BbH4B().unpack(str[start:end])
      self.status.is_comm_error = bool(self.status.is_comm_error)
      self.status.is_radiating = bool(self.status.is_radiating)
      self.status.is_failed = bool(self.status.is_failed)
      self.status.is_blocked = bool(self.status.is_blocked)
      self.status.is_overheating = bool(self.status.is_overheating)
      self.status.is_raw_data_mode = bool(self.status.is_raw_data_mode)
      self.status.is_lr_enabled = bool(self.status.is_lr_enabled)
      self.status.is_mr_enabled = bool(self.status.is_mr_enabled)
      self.status.is_sidelobe_blockage = bool(self.status.is_sidelobe_blockage)
      self.status.is_partial_blockage = bool(self.status.is_partial_blockage)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tracks = []
      for i in range(0, length):
        val1 = esr_msgs.msg.Track()
        _v3 = val1.header
        start = end
        end += 4
        (_v3.seq,) = _get_struct_I().unpack(str[start:end])
        _v4 = _v3.stamp
        _x = _v4
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v3.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v3.frame_id = str[start:end]
        _x = val1
        start = end
        end += 29
        (_x.status, _x.index, _x.range, _x.range_rate, _x.range_accl, _x.azimuth, _x.lateral_rate, _x.width, _x.is_mr_update, _x.is_lr_update, _x.amplitude,) = _get_struct_2B6f2Bb().unpack(str[start:end])
        val1.is_mr_update = bool(val1.is_mr_update)
        val1.is_lr_update = bool(val1.is_lr_update)
        self.tracks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.status.header.seq, _x.status.header.stamp.secs, _x.status.header.stamp.nsecs))
      _x = self.status.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_H6BbH4B().pack(_x.status.scan_index, _x.status.is_comm_error, _x.status.is_radiating, _x.status.is_failed, _x.status.is_blocked, _x.status.is_overheating, _x.status.is_raw_data_mode, _x.status.internal_temperature, _x.status.sw_version, _x.status.is_lr_enabled, _x.status.is_mr_enabled, _x.status.is_sidelobe_blockage, _x.status.is_partial_blockage))
      length = len(self.tracks)
      buff.write(_struct_I.pack(length))
      for val1 in self.tracks:
        _v5 = val1.header
        _x = _v5.seq
        buff.write(_get_struct_I().pack(_x))
        _v6 = _v5.stamp
        _x = _v6
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v5.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2B6f2Bb().pack(_x.status, _x.index, _x.range, _x.range_rate, _x.range_accl, _x.azimuth, _x.lateral_rate, _x.width, _x.is_mr_update, _x.is_lr_update, _x.amplitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status is None:
        self.status = esr_msgs.msg.Status()
      if self.tracks is None:
        self.tracks = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.status.header.seq, _x.status.header.stamp.secs, _x.status.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.status.scan_index, _x.status.is_comm_error, _x.status.is_radiating, _x.status.is_failed, _x.status.is_blocked, _x.status.is_overheating, _x.status.is_raw_data_mode, _x.status.internal_temperature, _x.status.sw_version, _x.status.is_lr_enabled, _x.status.is_mr_enabled, _x.status.is_sidelobe_blockage, _x.status.is_partial_blockage,) = _get_struct_H6BbH4B().unpack(str[start:end])
      self.status.is_comm_error = bool(self.status.is_comm_error)
      self.status.is_radiating = bool(self.status.is_radiating)
      self.status.is_failed = bool(self.status.is_failed)
      self.status.is_blocked = bool(self.status.is_blocked)
      self.status.is_overheating = bool(self.status.is_overheating)
      self.status.is_raw_data_mode = bool(self.status.is_raw_data_mode)
      self.status.is_lr_enabled = bool(self.status.is_lr_enabled)
      self.status.is_mr_enabled = bool(self.status.is_mr_enabled)
      self.status.is_sidelobe_blockage = bool(self.status.is_sidelobe_blockage)
      self.status.is_partial_blockage = bool(self.status.is_partial_blockage)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tracks = []
      for i in range(0, length):
        val1 = esr_msgs.msg.Track()
        _v7 = val1.header
        start = end
        end += 4
        (_v7.seq,) = _get_struct_I().unpack(str[start:end])
        _v8 = _v7.stamp
        _x = _v8
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v7.frame_id = str[start:end]
        _x = val1
        start = end
        end += 29
        (_x.status, _x.index, _x.range, _x.range_rate, _x.range_accl, _x.azimuth, _x.lateral_rate, _x.width, _x.is_mr_update, _x.is_lr_update, _x.amplitude,) = _get_struct_2B6f2Bb().unpack(str[start:end])
        val1.is_mr_update = bool(val1.is_mr_update)
        val1.is_lr_update = bool(val1.is_lr_update)
        self.tracks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B6f2Bb = None
def _get_struct_2B6f2Bb():
    global _struct_2B6f2Bb
    if _struct_2B6f2Bb is None:
        _struct_2B6f2Bb = struct.Struct("<2B6f2Bb")
    return _struct_2B6f2Bb
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_H6BbH4B = None
def _get_struct_H6BbH4B():
    global _struct_H6BbH4B
    if _struct_H6BbH4B is None:
        _struct_H6BbH4B = struct.Struct("<H6BbH4B")
    return _struct_H6BbH4B
