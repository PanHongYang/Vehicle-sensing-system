// Generated by gencpp from file serialPort/radar_data.msg
// DO NOT EDIT!


#ifndef SERIALPORT_MESSAGE_RADAR_DATA_H
#define SERIALPORT_MESSAGE_RADAR_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serialPort
{
template <class ContainerAllocator>
struct radar_data_
{
  typedef radar_data_<ContainerAllocator> Type;

  radar_data_()
    : radar_msg(0)  {
    }
  radar_data_(const ContainerAllocator& _alloc)
    : radar_msg(0)  {
  (void)_alloc;
    }



   typedef int16_t _radar_msg_type;
  _radar_msg_type radar_msg;





  typedef boost::shared_ptr< ::serialPort::radar_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serialPort::radar_data_<ContainerAllocator> const> ConstPtr;

}; // struct radar_data_

typedef ::serialPort::radar_data_<std::allocator<void> > radar_data;

typedef boost::shared_ptr< ::serialPort::radar_data > radar_dataPtr;
typedef boost::shared_ptr< ::serialPort::radar_data const> radar_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serialPort::radar_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serialPort::radar_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace serialPort

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'serialPort': ['/home/ubuntu/serialPort/src/serialPort/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::serialPort::radar_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serialPort::radar_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serialPort::radar_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serialPort::radar_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serialPort::radar_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serialPort::radar_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serialPort::radar_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "02683d36c207f710ce232222df4425ac";
  }

  static const char* value(const ::serialPort::radar_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x02683d36c207f710ULL;
  static const uint64_t static_value2 = 0xce232222df4425acULL;
};

template<class ContainerAllocator>
struct DataType< ::serialPort::radar_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serialPort/radar_data";
  }

  static const char* value(const ::serialPort::radar_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serialPort::radar_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 radar_msg\n\
";
  }

  static const char* value(const ::serialPort::radar_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serialPort::radar_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.radar_msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct radar_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serialPort::radar_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serialPort::radar_data_<ContainerAllocator>& v)
  {
    s << indent << "radar_msg: ";
    Printer<int16_t>::stream(s, indent + "  ", v.radar_msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIALPORT_MESSAGE_RADAR_DATA_H
